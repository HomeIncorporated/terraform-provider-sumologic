package sumologic

import (
	//"encoding/json"
	//"fmt"
	//"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestGetEndpointDefault(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		if r.Method != "GET" {
			t.Errorf("Expected ‘GET’ request, got ‘%s’", r.Method)
		}
		expectedURL := "/collectors"
		if r.URL.EscapedPath() != expectedURL {
			t.Errorf("Expected request to ‘%s’, got ‘%s’", expectedURL, r.URL.EscapedPath())
		}
	}))
	defer ts.Close()

	endpointUrl, err := getEndpointUrl(ts.URL, "accessToken")
	if err != nil {
		t.Errorf("getEndpointUrl() returned an error: %s", err)
		return
	}

	if endpointUrl.String() != ts.URL {
		t.Errorf("getEndpointUrl() did not return the correct URL. Expected `%s`, got `%s`", ts.URL, endpointUrl)
		return
	}
}

func TestGetEndpointRedirect(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Location", "https://api.us2.sumologic.com/api/v1/collectors")
		w.WriteHeader(http.StatusMovedPermanently)
		if r.Method != "GET" {
			t.Errorf("Expected ‘GET’ request, got ‘%s’", r.Method)
		}
		expectedURL := "/collectors"
		if r.URL.EscapedPath() != expectedURL {
			t.Errorf("Expected request to ‘%s’, got ‘%s’", expectedURL, r.URL.EscapedPath())
		}
	}))
	defer ts.Close()

	endpointUrl, err := getEndpointUrl(ts.URL, "accessToken")
	if err != nil {
		t.Errorf("getEndpointUrl() returned an error: %s", err)
		return
	}

	if endpointUrl.String() == ts.URL {
		t.Errorf("getEndpointUrl() did not return the correct URL. Expected other than `%s`, got `%s`", ts.URL, endpointUrl)
		return
	}
}
