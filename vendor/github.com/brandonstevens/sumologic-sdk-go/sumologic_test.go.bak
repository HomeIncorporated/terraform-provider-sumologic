package sumologic

import (
	//"encoding/json"
	//"fmt"
	//"io/ioutil"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestGetEndpointRedirect(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Location", "https://api.us2.sumologic.com/api/v1/collectors")
		w.WriteHeader(http.StatusMovedPermanently)
		if r.Method != "GET" {
			t.Errorf("Expected ‘GET’ request, got ‘%s’", r.Method)
		}
		expectedURL := "/collectors"
		if r.URL.EscapedPath() != expectedURL {
			t.Errorf("Expected request to ‘%s’, got ‘%s’", expectedURL, r.URL.EscapedPath())
		}
		log.Printf("r: %v", r)
		log.Printf("w: %v", w)
	}))
	defer ts.Close()

	endpointUrl, err := getEndpointUrl(ts.URL, "accessId")
	if err != nil {
		t.Errorf("getEndpointUrl() returned an error: %s", err)
		return
	}

	if endpointUrl.String() == defaultEndpointUrl {
		t.Errorf("getEndpointUrl() did not return the correct URL. Expected other than `%s`, got `%s`", defaultEndpointUrl, endpointUrl)
	}

	// temp, _, err := c.GetHostedCollector(Collector{
	// 	Id: defaultCollector.Id,
	// })
	// if err != nil {
	// 	t.Errorf("GetHostedCollector() returned an error: %s", err)
	// }
	// if temp.Id != defaultCollector.Id {
	// 	t.Errorf("GetHostedCollector() expected Id `%s`, got `%s`", defaultCollector.Id, temp.Id)
	// }
}

// func TestCreateHostedCollectorWrongResponseStatus(t *testing.T) {
// 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusUnauthorized)
// 	}))
// 	defer ts.Close()

// 	c := Client("accessId", "accessKey", ts.URL)

// 	_, err := c.CreateHostedCollector("test")
// 	if err == nil {
// 		t.Errorf("CreateHostedCollector() didn’t return an error")
// 	}
// }

// var defaultCollector = Collector{
// 	Id:            1234567890,
// 	Name:          "test",
// 	CollectorType: "Hosted",
// }

// func TestGetHostedCollectorOK(t *testing.T) {
// 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		if r.Method != "GET" {
// 			t.Errorf("Expected ‘GET’ request, got ‘%s’", r.Method)
// 		}
// 		expectedURL := fmt.Sprintf("/collectors/%d", defaultCollector.Id)
// 		if r.URL.EscapedPath() != expectedURL {
// 			t.Errorf("Expected request to ‘%s’, got ‘%s’", expectedURL, r.URL.EscapedPath())
// 		}
// 		body, _ := json.Marshal(CollectorRequest{
// 			Collector: defaultCollector,
// 		})
// 		w.Write(body)
// 	}))
// 	defer ts.Close()

// 	c, _ := Client("accessId", "accessKey", ts.URL)

// 	temp, _, err := c.GetHostedCollector(Collector{
// 		Id: defaultCollector.Id,
// 	})
// 	if err != nil {
// 		t.Errorf("GetHostedCollector() returned an error: %s", err)
// 	}
// 	if temp.Id != defaultCollector.Id {
// 		t.Errorf("GetHostedCollector() expected Id `%s`, got `%s`", defaultCollector.Id, temp.Id)
// 	}
// }

// func TestCreateHostedCollectorOK(t *testing.T) {
// 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		if r.Method != "POST" {
// 			t.Errorf("Expected ‘POST’ request, got ‘%s’", r.Method)
// 		}
// 		if r.URL.EscapedPath() != "/collectors" {
// 			t.Errorf("Expected request to ‘/collectors’, got ‘%s’", r.URL.EscapedPath())
// 		}
// 		if ctype := r.Header.Get("Content-Type"); ctype != "application/json" {
// 			t.Errorf("Expected response to be content-type ‘application/json’, got ‘%s’", ctype)
// 		}
// 		body, _ := ioutil.ReadAll(r.Body)
// 		cr := new(CollectorRequest)
// 		err := json.Unmarshal(body, &cr)
// 		if err != nil {
// 			t.Errorf("Unable to unmarshal CollectorRequest, got `%s`", body)
// 		}
// 		if cr.Collector.Name != "test" {
// 			t.Errorf("Expected request to include collector name ‘test’, got ‘%s’", cr.Collector.Name)
// 		}
// 		cr.Collector.Id = 1234567890
// 		js, err := json.Marshal(cr)
// 		if err != nil {
// 			http.Error(w, err.Error(), http.StatusInternalServerError)
// 			return
// 		}
// 		w.Write(js)
// 	}))
// 	defer ts.Close()

// 	c, _ := Client("accessId", "accessKey", ts.URL)

// 	temp, err := c.CreateHostedCollector(Collector{
// 		Name:          "test",
// 		CollectorType: "Hosted",
// 	})
// 	if err != nil {
// 		t.Errorf("CreateHostedCollector() returned an error: %s", err)
// 	}
// 	if temp.Id != 1234567890 {
// 		t.Errorf("CreateHostedCollector() expected Id 1234567890, got `%s`", temp.Id)
// 	}
// }

// func TestUpdateHostedCollectorOK(t *testing.T) {
// 	updatedCollector := defaultCollector
// 	updatedCollector.Name = "Updated"
// 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		if r.Method != "PUT" {
// 			t.Errorf("Expected ‘PUT’ request, got ‘%s’", r.Method)
// 		}
// 		expectedURL := fmt.Sprintf("/collectors/%d", defaultCollector.Id)
// 		if r.URL.EscapedPath() != expectedURL {
// 			t.Errorf("Expected request to ‘%s’, got ‘%s’", expectedURL, r.URL.EscapedPath())
// 		}
// 		if r.Header.Get("If-Match") != "etag" {
// 			t.Errorf("Expected Etag of `etag`, got `%s`", r.Header.Get("If-Match"))
// 		}
// 		body, _ := json.Marshal(CollectorRequest{
// 			Collector: updatedCollector,
// 		})
// 		w.Write(body)
// 	}))
// 	defer ts.Close()

// 	c, _ := Client("accessId", "accessKey", ts.URL)

// 	temp, err := c.UpdateHostedCollector(updatedCollector, "etag")
// 	if err != nil {
// 		t.Errorf("UpdateHostedCollector() returned an error: %s", err)
// 	}
// 	if temp.Id != updatedCollector.Id {
// 		t.Errorf("UpdateHostedCollector() expected Id `%s`, got `%s`", defaultCollector.Id, temp.Id)
// 	}
// 	if temp.Name == defaultCollector.Name {
// 		t.Errorf("UpdateHostedCollector() did not update the name")
// 	}
// }

// func TestDeleteHostedCollectorOK(t *testing.T) {
// 	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		if r.Method != "DELETE" {
// 			t.Errorf("Expected ‘DELETE’ request, got ‘%s’", r.Method)
// 		}
// 		expectedURL := fmt.Sprintf("/collectors/%d", defaultCollector.Id)
// 		if r.URL.EscapedPath() != expectedURL {
// 			t.Errorf("Expected request to ‘%s’, got ‘%s’", expectedURL, r.URL.EscapedPath())
// 		}
// 	}))
// 	defer ts.Close()

// 	c, _ := Client("accessId", "accessKey", ts.URL)

// 	err := c.DeleteHostedCollector(defaultCollector.Id)
// 	if err != nil {
// 		t.Errorf("DeleteHostedCollector() returned an error: %s", err)
// 	}
// }
