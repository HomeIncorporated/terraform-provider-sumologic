package sumologic

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
)

type CollectorRequest struct {
	Collector Collector `json:"collector"`
}

type Collector struct {
	Id               int              `json:"id,omitempty"`
	Name             string           `json:"name"`
	Description      string           `json:"description,omitempty"`
	Category         string           `json:"category,omitempty"`
	TimeZone         string           `json:"timezone,omitempty"`
	Links            []CollectorLinks `json:"links,omitempty"`
	CollectorType    string           `json:"collectorType,omitempty"`
	CollectorVersion string           `json:"collectorVersion,omitempty"`
	LastSeenAlive    int64            `json:"lastSeenAlive,omitempty"`
	Alive            bool             `json:"alive,omitempty"`
}

type CollectorLinks struct {
	Rel  string `json:"rel"`
	Href string `json:"href"`
}

func (s *SumoLogic) GetHostedCollector(collector Collector) (*Collector, string, error) {

	collectorRequest := CollectorRequest{
		Collector: collector,
	}

	body, _ := json.Marshal(collectorRequest)

	relativeUrl, _ := url.Parse(fmt.Sprintf("collectors/%d", collector.Id))
	url := s.EndpointUrl.ResolveReference(relativeUrl)

	req, err := http.NewRequest("GET", url.String(), bytes.NewBuffer((body)))
	req.Header.Add("Authorization", "Basic "+basicAuth(s.AccessId, s.AccessKey))

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, "", err
	}
	defer resp.Body.Close()

	ResponseBody, _ := ioutil.ReadAll(resp.Body)

	if resp.StatusCode == 401 {
		return nil, "", fmt.Errorf("Authentication Error with Sumo Logic")
	}

	if resp.StatusCode != 200 && resp.StatusCode != 201 {
		return nil, "", fmt.Errorf("Unknown Error with Sumo Logic")
	}

	var cr = new(CollectorRequest)
	err = json.Unmarshal(ResponseBody, &cr)
	if err != nil {
		return nil, "", err
	}

	return &cr.Collector, resp.Header.Get("ETag"), nil
}

func (s *SumoLogic) CreateHostedCollector(collector Collector) (*Collector, error) {

	collectorRequest := CollectorRequest{
		Collector: collector,
	}

	body, _ := json.Marshal(collectorRequest)

	relativeUrl, _ := url.Parse("collectors")
	url := s.EndpointUrl.ResolveReference(relativeUrl)

	req, err := http.NewRequest("POST", url.String(), bytes.NewBuffer(body))
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Basic "+basicAuth(s.AccessId, s.AccessKey))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	responseBody, _ := ioutil.ReadAll(resp.Body)

	if resp.StatusCode == 401 {
		return nil, fmt.Errorf("Authentication Error with Sumo Logic")
	}

	if resp.StatusCode != 200 && resp.StatusCode != 201 {
		return nil, fmt.Errorf("Unknown Error with Sumo Logic")
	}

	var cr = new(CollectorRequest)
	err = json.Unmarshal(responseBody, &cr)
	if err != nil {
		return nil, err
	}

	return &cr.Collector, nil
}

func (s *SumoLogic) UpdateHostedCollector(collector Collector, etag string) (*Collector, error) {

	collectorRequest := CollectorRequest{
		Collector: collector,
	}

	body, _ := json.Marshal(collectorRequest)

	relativeUrl, _ := url.Parse(fmt.Sprintf("collectors/%d", collector.Id))
	url := s.EndpointUrl.ResolveReference(relativeUrl)

	req, err := http.NewRequest("PUT", url.String(), bytes.NewBuffer((body)))
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", "Basic "+basicAuth(s.AccessId, s.AccessKey))
	req.Header.Add("If-Match", etag)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	ResponseBody, _ := ioutil.ReadAll(resp.Body)

	if resp.StatusCode == 401 {
		return nil, fmt.Errorf("Authentication Error with Sumo Logic")
	}

	if resp.StatusCode != 200 && resp.StatusCode != 201 {
		return nil, fmt.Errorf("Unknown Error with Sumo Logic")
	}

	var cr = new(CollectorRequest)
	err = json.Unmarshal(ResponseBody, &cr)
	if err != nil {
		return nil, err
	}

	return &cr.Collector, nil
}

func (s *SumoLogic) DeleteHostedCollector(id int) error {
	c, _ := url.Parse(fmt.Sprintf("collectors/%d", id))
	req, err := http.NewRequest("DELETE", s.EndpointUrl.ResolveReference(c).String(), nil)
	req.Header.Add("Authorization", "Basic "+basicAuth(s.AccessId, s.AccessKey))

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode == 401 {
		return fmt.Errorf("Authentication Error with Sumo Logic")
	}

	if resp.StatusCode != 200 && resp.StatusCode != 201 {
		return fmt.Errorf("Unknown Error with Sumo Logic")
	}

	return nil
}
