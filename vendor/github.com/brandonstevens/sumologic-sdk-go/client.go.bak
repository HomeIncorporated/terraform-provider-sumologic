

func getEndpointUrl(endpointUrl, authToken string) (*url.URL, error) {

	baseEndpointUrl, _ := url.Parse(endpointUrl)

	relativeUrl, _ := url.Parse("collectors")
	url := baseEndpointUrl.ResolveReference(relativeUrl)

	req, err := http.NewRequest("GET", url.String(), nil)
	req.Header.Add("Authorization", "Basic "+authToken)

	client := &http.Client{
		// we won't want the client to automatically redirect
		// since we just want to capture the redirect URL
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		return baseEndpointUrl, nil
	case http.StatusMovedPermanently:
		return url.Parse(resp.Header.Get("Location"))
	case http.StatusUnauthorized:
		return nil, fmt.Errorf("Authentication Error with Sumo Logic")
	default:
		return nil, fmt.Errorf("Unknown Response with Sumo Logic: `%s`", resp.StatusCode)
	}
}